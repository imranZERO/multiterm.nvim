*multiterm.nvim* Multiple floating terminal manager for Neovim

Author:     Imran H. <imran.leave@gmail.com>
Source:     https://github.com/imranzero/multiterm.nvim
Version:    0.1.0

==============================================================================
Contents                                                  *multiterm-contents*

    1. Introduction .................... |multiterm-introduction|
    2. Usage ........................... |multiterm-usage|
    3. Configuration ................... |multiterm-configuration|

==============================================================================
1. Introduction                                       *multiterm-introduction*

Multiterm is a multiple floating terminal toggling helper for Neovim. It allows
you to toggle and switch between multiple floating terminal instances. It
smooths the operation by providing one single command and several different
mode mappings with count to help you win at floating terminals.

==============================================================================
2. Usage                                                     *multiterm-usage*

:[count]Multiterm[!] [cmd]                                        *:Multiterm*
Run |:Multiterm| to toggle your floating terminals.

By default, if you run :Multiterm without any count, the terminal with tag 1
will be toggled. If you want to add a new terminal instance, for example, you
could create a terminal with tag 3 by running :3Multiterm.

If you do not have any floating terminal instance, running :Multiterm [cmd]
will create a floating terminal with tag '1'. It is not suggested to run a
non-interactive [cmd] as the terminal session will end and get destroyed as
soon as [cmd] finishes if you run :Multiterm without '!'.

If your cursor is in a floating terminal window, run :Multiterm will close
that window and put the terminal session into background. Otherwise the most
recently used floating terminal instance will be toggled.

If you run :3Multiterm and do not have a floating terminal with tag '3'
created, a new floating terminal window with tag '3' will be created and
become the current active floating window.

If your tag '3' floating terminal is in the background, run :3Multiterm will
put the session into foreground. You could then run :Multiterm to close the
window and put it into background again.

[count] could be a number between 1 and 9 and is the tag of the floating
window that you want to activate. If it is not specified, the current active
floating terminal session will be closed, or the tag 1 session will be
activated in the condition that there is no active session.

[!] forces the terminal window not to close when the terminal job exits.
Otherwise, the window will be closed as immediately as the job exits with a
zero exit code.

[cmd] is the optional command to run. if not specified, the current 'shell'
option value will be used.

<Plug>(Multiterm)                                          *<Plug>(Multiterm)*
|Multiterm| provides several mappings for you. it is suggested to use them
since you do not need to switch between different Vim modes to input the
command. This mappings are just like |:Multiterm| without any additional
argument.

<Plug>(MultitermList)                                  *<Plug>(MultitermList)*
The |<Plug>MultitermList| keymap opens a popup window with a list of the active
mulititerm windows. You can navigate this list with standard vim keys and
pressing |<CR>| will open the corresponding terminal window. Additionally, you
can press d to delete the selected terminal and its buffer directly from the list.

Add the following into your config file to toggle Multiterm floating terminal
windows with <F12>:
>
    require("multiterm").setup({
        vim.keymap.set({ "n", "v", "i", "t" }, "<F12>", "<Plug>(Multiterm)"),
        vim.keymap.set("n", "<leader><F12>", "<Plug>(MultitermList)"),
    })

The first mapping here sets up the |Multiterm| mapping for normal, visual,
insert, terminal modes. And the second mapping is for opening the pop-up list
for all active terminals.
<
These mappings have most of the functionality of the |:Multiterm| command. For
example, here you can open number 3 of the 1-9 tags by pressing `3<F12>`, and
switch to the first terminal window with `1<F12>`.
When terminal windows are active, a tab bar is shown in the top-right corner
to indicate the current terminal session. You can switch between terminals
with:

    <C-1> through <C-9> – to activate a terminal by its tag

    <C-h> / <C-l> – to cycle between terminals left and right

    <C-Left> / <C-Right> – alternative keys for cycling

If the current terminal buffer is already visible and :Multiterm is invoked
again with a new [cmd], the existing terminal will be reused and its content
replaced with the new command.

==============================================================================
3. Configuration                                     *multiterm-configuration*

You can configure multiterm with Lua via require("multiterm").setup(opts).
>
    -- Default options

    require("multiterm").setup({
        height = 0.8,
        width = 0.8,
        border = 'rounded',
        term_hl = 'Normal',
        border_hl = 'FloatBorder',
        show_term_tag = true,
        show_backdrop = true,
        backdrop_bg = 'Black',
        backdrop_transparency = 60,
        fullscreen = false,
	show_tab = true,
	tabline_hl_cur = "PmenuSel", 
	tabline_hl_other = "Pmenu", 

        -- any keymaps you want
    )}
<
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
